import 'package:build/build.dart';
import 'package:code_builder/code_builder.dart';
import 'package:dart_style/dart_style.dart';
import 'package:glob/glob.dart';
import 'package:path/path.dart' as path;

Builder foundationExportBuilder(BuilderOptions _) =>
    const FoundationExportBuilder();

class FoundationExportBuilder implements Builder {
  const FoundationExportBuilder();
  @override
  Map<String, List<String>> get buildExtensions => {
        r'$lib$': ['foundation.dart'],
      };

  @override
  Future<void> build(BuildStep buildStep) async {
    final outputString = StringBuffer();

    outputString
        .writeln('/// This file is generated by the FoundationExportBuilder.');
    outputString.writeln('/// DO NOT MODIFY MANUALLY');
    outputString.writeln('');

    outputString.writeln('// Automated file exports');

    final filesList = await buildStep.findAssets(Glob('lib/**')).toList();

    // Order the files alphabetically
    filesList.sort((a, b) => a.path.compareTo(b.path));

    // Traverse the /lib/ directory
    for (final entity in filesList) {
      if (!_isDartFile(entity.path)) {
        continue;
      }
      if (_isInternal(entity.path)) {
        continue;
      }

      if (!_hasValidSuffix(entity.path) && !_isCore(entity.path)) {
        continue;
      }
      final relativePath = path.relative(entity.path, from: 'lib');

      outputString.writeln('export \'$relativePath\';');
    }

    final exportFile =
        Library((b) => b..body.add(Code(outputString.toString())));

    final emitter = DartEmitter();
    final formatted =
        DartFormatter().format(exportFile.accept(emitter).toString());

    await buildStep.writeAsString(
        AssetId(buildStep.inputId.package, 'lib/foundation.dart'), formatted);
  }

  bool _isInternal(String path) => path.contains('/internal/');

  bool _isCore(String path) => path.contains('/core/');

  bool _isDartFile(String path) => path.endsWith('.dart');

  bool _hasValidSuffix(String path) {
    const validSuffixes = [
      '_dto.dart',
      '_util.dart',
      '_attribute.dart',
      '_spec.dart'
    ];
    return validSuffixes.any(path.endsWith);
  }
}
