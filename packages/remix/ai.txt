# AI Usage Guide

## Overview
Remix is a Flutter component library built on top of the Mix design system. It provides a comprehensive set of pre-built, customizable components that follow consistent design patterns and can be easily styled and extended.

## Constraints
remix: 0.1.0-beta.0

### Component Categories and Examples

#### 1. Action Components
- **RxButton**: Primary action button with various styles and states.
  - **Example**: `demo/lib/api/action/button.dart`

#### 2. Content Presentation Components
- **RxAccordion**: Collapsible content sections.
  - **Example**: `demo/lib/api/content_presentation/accordion.dart`
- **RxAvatar**: User profile images and initials.
  - **Example**: `demo/lib/api/content_presentation/avatar.dart`
- **RxCard**: Content containers with elevation.
  - **Example**: `demo/lib/api/content_presentation/card.dart`

#### 3. Feedback Components
- **RxSpinner**: Loading indicators.
  - **Example**: `demo/lib/api/feedback/spinner.dart`
- **RxCallout**: Informational messages.
  - **Example**: `demo/lib/api/feedback/callout.dart`

#### 4. Form Components
- **RxTextField**: Text input fields.
  - **Example**: `demo/lib/api/form/textfield.dart`
- **RxCheckbox**: Checkbox inputs.
  - **Example**: `demo/lib/api/form/checkbox.dart`

#### 5. Layout Components
- **RxDivider**: Visual separators.
  - **Example**: `demo/lib/api/layout/divider.dart`

#### 6. Navigation Components
- **RxSegmentedControl**: Tab-like navigation controls.

#### 7. Utility Components
- **RxBadge**: Status indicators and counters.
  - **Example**: `demo/lib/api/utility/badge.dart`

### Styling and Customization

#### Using RxStyles
All Remix components support extensive customization through their respective style classes. For example, you can customize the `RxButton` using `RxButtonStyle` to change colors, border radius, and text styles.

**Example of Using RxStyles:**

You can define styles inline for quick, one-off customizations, or in a separate class for reusability across multiple components.

**Inline Style Example:**

For quick customizations, you can define styles directly within the widget:

```dart
RxButton(
  onPressed: () {},
  label: 'Inline Styled Button',
  style: RxButtonStyle()
    ..textStyle.color.white()
    ..textStyle.fontSize(16)
    ..container.color.blue()
    ..container.borderRadius(12),
)
```

**Separate Class Style Example:**

For reusable styles, define them in a separate class:

```dart
class CustomButtonStyle extends RxButtonStyle {
  CustomButtonStyle() : super() {
    textStyle
      ..color.white()
      ..fontSize(16)
      ..fontWeight.bold();

    container
      ..color.blue()
      ..borderRadius(12)
      ..padding(EdgeInsets.symmetric(vertical: 12, horizontal: 24))
      ..alignment.center();
  }
}

// Usage in a widget
RxButton(
  onPressed: () {},
  label: 'Custom Button',
  style: CustomButtonStyle(),
)
```

**When to Use Each Approach:**

- **Inline Styles**: Use when the style is specific to a single instance and won't be reused.
- **Separate Class Styles**: Use when the style will be applied to multiple components or needs to be easily maintained and updated.

**Guidelines for Using RxStyles:**

1. **Consistent Naming Conventions**: Ensure that all style classes follow a consistent naming convention that reflects their purpose and usage. For example, `LinkButtonStyle`, `TextFieldStyle`, and `SocialMediaButtonStyle` are clear and descriptive.

2. **Documentation and Examples**: Provide clear documentation and examples for each style class. This helps developers understand how to apply and customize styles effectively.

For more detailed examples and documentation, refer to the `demo` directory in the library's repository.
