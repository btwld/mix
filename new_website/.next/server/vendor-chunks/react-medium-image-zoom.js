"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-medium-image-zoom";
exports.ids = ["vendor-chunks/react-medium-image-zoom"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-medium-image-zoom/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/react-medium-image-zoom/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Controlled: () => (/* binding */ Controlled),\n/* harmony export */   \"default\": () => (/* binding */ Uncontrolled)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* __next_internal_client_entry_do_not_use__ Controlled,default auto */ \n\nfunction ICompress() {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        \"aria-hidden\": \"true\",\n        \"data-rmiz-btn-unzoom-icon\": true,\n        fill: \"currentColor\",\n        focusable: \"false\",\n        viewBox: \"0 0 16 16\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M 14.144531 1.148438 L 9 6.292969 L 9 3 L 8 3 L 8 8 L 13 8 L 13 7 L 9.707031 7 L 14.855469 1.851563 Z M 8 8 L 3 8 L 3 9 L 6.292969 9 L 1.148438 14.144531 L 1.851563 14.855469 L 7 9.707031 L 7 13 L 8 13 Z\"\n    }));\n}\nfunction IEnlarge() {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        \"aria-hidden\": \"true\",\n        \"data-rmiz-btn-zoom-icon\": true,\n        fill: \"currentColor\",\n        focusable: \"false\",\n        viewBox: \"0 0 16 16\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M 9 1 L 9 2 L 12.292969 2 L 2 12.292969 L 2 9 L 1 9 L 1 14 L 6 14 L 6 13 L 2.707031 13 L 13 2.707031 L 13 6 L 14 6 L 14 1 Z\"\n    }));\n}\nconst testElType = (type, el)=>type === el?.tagName?.toUpperCase?.();\nconst testDiv = (el)=>testElType('DIV', el) || testElType('SPAN', el);\nconst testImg = (el)=>testElType('IMG', el);\nconst testImgLoaded = (el)=>el.complete && el.naturalHeight !== 0;\nconst testSvg = (el)=>testElType('SVG', el);\nconst getScaleToWindow = ({ height, offset, width })=>{\n    return Math.min((window.innerWidth - offset * 2) / width, (window.innerHeight - offset * 2) / height);\n};\nconst getScaleToWindowMax = ({ containerHeight, containerWidth, offset, targetHeight, targetWidth })=>{\n    const scale = getScaleToWindow({\n        height: targetHeight,\n        offset,\n        width: targetWidth\n    });\n    const ratio = targetWidth > targetHeight ? targetWidth / containerWidth : targetHeight / containerHeight;\n    return scale > 1 ? ratio : scale * ratio;\n};\nconst getScale = ({ containerHeight, containerWidth, hasScalableSrc, offset, targetHeight, targetWidth })=>{\n    if (!containerHeight || !containerWidth) {\n        return 1;\n    }\n    return !hasScalableSrc && targetHeight && targetWidth ? getScaleToWindowMax({\n        containerHeight,\n        containerWidth,\n        offset,\n        targetHeight,\n        targetWidth\n    }) : getScaleToWindow({\n        height: containerHeight,\n        offset,\n        width: containerWidth\n    });\n};\nconst URL_REGEX = /url(?:\\(['\"]?)(.*?)(?:['\"]?\\))/;\nconst getImgSrc = (imgEl)=>{\n    if (imgEl) {\n        if (testImg(imgEl)) {\n            return imgEl.currentSrc;\n        } else if (testDiv(imgEl)) {\n            const bgImg = window.getComputedStyle(imgEl).backgroundImage;\n            if (bgImg) {\n                return URL_REGEX.exec(bgImg)?.[1];\n            }\n        }\n    }\n};\nconst getImgAlt = (imgEl)=>{\n    if (imgEl) {\n        if (testImg(imgEl)) {\n            return imgEl.alt ?? undefined;\n        } else {\n            return imgEl.getAttribute('aria-label') ?? undefined;\n        }\n    }\n};\nconst getImgRegularStyle = ({ containerHeight, containerLeft, containerTop, containerWidth, hasScalableSrc, offset, targetHeight, targetWidth })=>{\n    const scale = getScale({\n        containerHeight,\n        containerWidth,\n        hasScalableSrc,\n        offset,\n        targetHeight,\n        targetWidth\n    });\n    return {\n        top: containerTop,\n        left: containerLeft,\n        width: containerWidth * scale,\n        height: containerHeight * scale,\n        transform: `translate(0,0) scale(${1 / scale})`\n    };\n};\nconst parsePosition = ({ position, relativeNum })=>{\n    const positionNum = parseFloat(position);\n    return position.endsWith('%') ? relativeNum * positionNum / 100 : positionNum;\n};\nconst getImgObjectFitStyle = ({ containerHeight, containerLeft, containerTop, containerWidth, hasScalableSrc, objectFit, objectPosition, offset, targetHeight, targetWidth })=>{\n    if (objectFit === 'scale-down') {\n        if (targetWidth <= containerWidth && targetHeight <= containerHeight) {\n            objectFit = 'none';\n        } else {\n            objectFit = 'contain';\n        }\n    }\n    if (objectFit === 'cover' || objectFit === 'contain') {\n        const widthRatio = containerWidth / targetWidth;\n        const heightRatio = containerHeight / targetHeight;\n        const ratio = objectFit === 'cover' ? Math.max(widthRatio, heightRatio) : Math.min(widthRatio, heightRatio);\n        const [posLeft = '50%', posTop = '50%'] = objectPosition.split(' ');\n        const posX = parsePosition({\n            position: posLeft,\n            relativeNum: containerWidth - targetWidth * ratio\n        });\n        const posY = parsePosition({\n            position: posTop,\n            relativeNum: containerHeight - targetHeight * ratio\n        });\n        const scale = getScale({\n            containerHeight: targetHeight * ratio,\n            containerWidth: targetWidth * ratio,\n            hasScalableSrc,\n            offset,\n            targetHeight,\n            targetWidth\n        });\n        return {\n            top: containerTop + posY,\n            left: containerLeft + posX,\n            width: targetWidth * ratio * scale,\n            height: targetHeight * ratio * scale,\n            transform: `translate(0,0) scale(${1 / scale})`\n        };\n    } else if (objectFit === 'none') {\n        const [posLeft = '50%', posTop = '50%'] = objectPosition.split(' ');\n        const posX = parsePosition({\n            position: posLeft,\n            relativeNum: containerWidth - targetWidth\n        });\n        const posY = parsePosition({\n            position: posTop,\n            relativeNum: containerHeight - targetHeight\n        });\n        const scale = getScale({\n            containerHeight: targetHeight,\n            containerWidth: targetWidth,\n            hasScalableSrc,\n            offset,\n            targetHeight,\n            targetWidth\n        });\n        return {\n            top: containerTop + posY,\n            left: containerLeft + posX,\n            width: targetWidth * scale,\n            height: targetHeight * scale,\n            transform: `translate(0,0) scale(${1 / scale})`\n        };\n    } else if (objectFit === 'fill') {\n        const widthRatio = containerWidth / targetWidth;\n        const heightRatio = containerHeight / targetHeight;\n        const ratio = Math.max(widthRatio, heightRatio);\n        const scale = getScale({\n            containerHeight: targetHeight * ratio,\n            containerWidth: targetWidth * ratio,\n            hasScalableSrc,\n            offset,\n            targetHeight,\n            targetWidth\n        });\n        return {\n            width: containerWidth * scale,\n            height: containerHeight * scale,\n            transform: `translate(0,0) scale(${1 / scale})`\n        };\n    } else {\n        return {};\n    }\n};\nconst getDivImgStyle = ({ backgroundPosition, backgroundSize, containerHeight, containerLeft, containerTop, containerWidth, hasScalableSrc, offset, targetHeight, targetWidth })=>{\n    if (backgroundSize === 'cover' || backgroundSize === 'contain') {\n        const widthRatio = containerWidth / targetWidth;\n        const heightRatio = containerHeight / targetHeight;\n        const ratio = backgroundSize === 'cover' ? Math.max(widthRatio, heightRatio) : Math.min(widthRatio, heightRatio);\n        const [posLeft = '50%', posTop = '50%'] = backgroundPosition.split(' ');\n        const posX = parsePosition({\n            position: posLeft,\n            relativeNum: containerWidth - targetWidth * ratio\n        });\n        const posY = parsePosition({\n            position: posTop,\n            relativeNum: containerHeight - targetHeight * ratio\n        });\n        const scale = getScale({\n            containerHeight: targetHeight * ratio,\n            containerWidth: targetWidth * ratio,\n            hasScalableSrc,\n            offset,\n            targetHeight,\n            targetWidth\n        });\n        return {\n            top: containerTop + posY,\n            left: containerLeft + posX,\n            width: targetWidth * ratio * scale,\n            height: targetHeight * ratio * scale,\n            transform: `translate(0,0) scale(${1 / scale})`\n        };\n    } else if (backgroundSize === 'auto') {\n        const [posLeft = '50%', posTop = '50%'] = backgroundPosition.split(' ');\n        const posX = parsePosition({\n            position: posLeft,\n            relativeNum: containerWidth - targetWidth\n        });\n        const posY = parsePosition({\n            position: posTop,\n            relativeNum: containerHeight - targetHeight\n        });\n        const scale = getScale({\n            containerHeight: targetHeight,\n            containerWidth: targetWidth,\n            hasScalableSrc,\n            offset,\n            targetHeight,\n            targetWidth\n        });\n        return {\n            top: containerTop + posY,\n            left: containerLeft + posX,\n            width: targetWidth * scale,\n            height: targetHeight * scale,\n            transform: `translate(0,0) scale(${1 / scale})`\n        };\n    } else {\n        const [sizeW = '50%', sizeH = '50%'] = backgroundSize.split(' ');\n        const sizeWidth = parsePosition({\n            position: sizeW,\n            relativeNum: containerWidth\n        });\n        const sizeHeight = parsePosition({\n            position: sizeH,\n            relativeNum: containerHeight\n        });\n        const widthRatio = sizeWidth / targetWidth;\n        const heightRatio = sizeHeight / targetHeight;\n        const ratio = Math.min(widthRatio, heightRatio);\n        const [posLeft = '50%', posTop = '50%'] = backgroundPosition.split(' ');\n        const posX = parsePosition({\n            position: posLeft,\n            relativeNum: containerWidth - targetWidth * ratio\n        });\n        const posY = parsePosition({\n            position: posTop,\n            relativeNum: containerHeight - targetHeight * ratio\n        });\n        const scale = getScale({\n            containerHeight: targetHeight * ratio,\n            containerWidth: targetWidth * ratio,\n            hasScalableSrc,\n            offset,\n            targetHeight,\n            targetWidth\n        });\n        return {\n            top: containerTop + posY,\n            left: containerLeft + posX,\n            width: targetWidth * ratio * scale,\n            height: targetHeight * ratio * scale,\n            transform: `translate(0,0) scale(${1 / scale})`\n        };\n    }\n};\nconst SRC_SVG_REGEX = /\\.svg$/i;\nconst getStyleModalImg = ({ hasZoomImg, imgSrc, isSvg, isZoomed, loadedImgEl, offset, shouldRefresh, targetEl })=>{\n    const hasScalableSrc = isSvg || imgSrc?.slice?.(0, 18) === 'data:image/svg+xml' || hasZoomImg || !!(imgSrc && SRC_SVG_REGEX.test(imgSrc));\n    const imgRect = targetEl.getBoundingClientRect();\n    const targetElComputedStyle = window.getComputedStyle(targetEl);\n    const isDivImg = loadedImgEl != null && testDiv(targetEl);\n    const isImgObjectFit = loadedImgEl != null && !isDivImg;\n    const styleImgRegular = getImgRegularStyle({\n        containerHeight: imgRect.height,\n        containerLeft: imgRect.left,\n        containerTop: imgRect.top,\n        containerWidth: imgRect.width,\n        hasScalableSrc,\n        offset,\n        targetHeight: loadedImgEl?.naturalHeight || imgRect.height,\n        targetWidth: loadedImgEl?.naturalWidth || imgRect.width\n    });\n    const styleImgObjectFit = isImgObjectFit ? getImgObjectFitStyle({\n        containerHeight: imgRect.height,\n        containerLeft: imgRect.left,\n        containerTop: imgRect.top,\n        containerWidth: imgRect.width,\n        hasScalableSrc,\n        objectFit: targetElComputedStyle.objectFit,\n        objectPosition: targetElComputedStyle.objectPosition,\n        offset,\n        targetHeight: loadedImgEl?.naturalHeight || imgRect.height,\n        targetWidth: loadedImgEl?.naturalWidth || imgRect.width\n    }) : undefined;\n    const styleDivImg = isDivImg ? getDivImgStyle({\n        backgroundPosition: targetElComputedStyle.backgroundPosition,\n        backgroundSize: targetElComputedStyle.backgroundSize,\n        containerHeight: imgRect.height,\n        containerLeft: imgRect.left,\n        containerTop: imgRect.top,\n        containerWidth: imgRect.width,\n        hasScalableSrc,\n        offset,\n        targetHeight: loadedImgEl?.naturalHeight || imgRect.height,\n        targetWidth: loadedImgEl?.naturalWidth || imgRect.width\n    }) : undefined;\n    const style = Object.assign({}, styleImgRegular, styleImgObjectFit, styleDivImg);\n    if (isZoomed) {\n        const viewportX = window.innerWidth / 2;\n        const viewportY = window.innerHeight / 2;\n        const childCenterX = parseFloat(String(style.left || 0)) + parseFloat(String(style.width || 0)) / 2;\n        const childCenterY = parseFloat(String(style.top || 0)) + parseFloat(String(style.height || 0)) / 2;\n        const translateX = viewportX - childCenterX;\n        const translateY = viewportY - childCenterY;\n        if (shouldRefresh) {\n            style.transitionDuration = '0.01ms';\n        }\n        style.transform = `translate(${translateX}px,${translateY}px) scale(1)`;\n    }\n    return style;\n};\nconst getStyleGhost = (imgEl)=>{\n    if (!imgEl) {\n        return {};\n    }\n    if (testSvg(imgEl)) {\n        const parentEl = imgEl.parentElement;\n        const rect = imgEl.getBoundingClientRect();\n        if (parentEl) {\n            const parentRect = parentEl.getBoundingClientRect();\n            return {\n                height: rect.height,\n                left: parentRect.left - rect.left,\n                top: parentRect.top - rect.top,\n                width: rect.width\n            };\n        } else {\n            return {\n                height: rect.height,\n                left: rect.left,\n                width: rect.width,\n                top: rect.top\n            };\n        }\n    } else {\n        return {\n            height: imgEl.offsetHeight,\n            left: imgEl.offsetLeft,\n            width: imgEl.offsetWidth,\n            top: imgEl.offsetTop\n        };\n    }\n};\nconst adjustSvgIDs = (svgEl)=>{\n    const newIdSuffix = '-zoom';\n    const attrs = [\n        'clip-path',\n        'fill',\n        'mask',\n        'marker-start',\n        'marker-mid',\n        'marker-end'\n    ];\n    const idMap = new Map();\n    if (svgEl.hasAttribute('id')) {\n        const oldId = svgEl.id;\n        const newId = oldId + newIdSuffix;\n        idMap.set(oldId, newId);\n        svgEl.id = newId;\n    }\n    svgEl.querySelectorAll('[id]').forEach((el)=>{\n        const oldId = el.id;\n        const newId = oldId + newIdSuffix;\n        idMap.set(oldId, newId);\n        el.id = newId;\n    });\n    idMap.forEach((newId, oldId)=>{\n        const urlOldID = `url(#${oldId})`;\n        const urlNewID = `url(#${newId})`;\n        const attrsQuery = attrs.map((attr)=>`[${attr}=\"${urlOldID}\"]`).join(', ');\n        svgEl.querySelectorAll(attrsQuery).forEach((usedEl)=>{\n            attrs.forEach((attr)=>{\n                if (usedEl.getAttribute(attr) === urlOldID) {\n                    usedEl.setAttribute(attr, urlNewID);\n                }\n            });\n        });\n    });\n    svgEl.querySelectorAll('style').forEach((styleEl)=>{\n        idMap.forEach((newId, oldId)=>{\n            if (styleEl.textContent) {\n                styleEl.textContent = styleEl.textContent.replaceAll(`#${oldId}`, `#${newId}`);\n            }\n        });\n    });\n};\nconst IMAGE_QUERY = [\n    'img',\n    'svg',\n    '[role=\"img\"]',\n    '[data-zoom]'\n].map((x)=>`${x}:not([aria-hidden=\"true\"])`).join(',');\nconst defaultBodyAttrs = {\n    overflow: '',\n    width: ''\n};\nfunction Controlled(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlledBase, {\n        ...props\n    });\n}\nclass ControlledBase extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(){\n        super(...arguments);\n        this.state = {\n            id: '',\n            isZoomImgLoaded: false,\n            loadedImgEl: undefined,\n            modalState: \"UNLOADED\",\n            shouldRefresh: false,\n            styleGhost: {}\n        };\n        this.refContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        this.refDialog = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        this.refModalContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        this.refModalImg = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        this.refWrap = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        this.imgEl = null;\n        this.isScaling = false;\n        this.prevBodyAttrs = defaultBodyAttrs;\n        this.styleModalImg = {};\n        this.handleModalStateChange = (prevModalState)=>{\n            const { modalState } = this.state;\n            if (prevModalState !== \"LOADING\" && modalState === \"LOADING\") {\n                this.loadZoomImg();\n                window.addEventListener('resize', this.handleResize, {\n                    passive: true\n                });\n                window.addEventListener('touchstart', this.handleTouchStart, {\n                    passive: true\n                });\n                window.addEventListener('touchmove', this.handleTouchMove, {\n                    passive: true\n                });\n                window.addEventListener('touchend', this.handleTouchEnd, {\n                    passive: true\n                });\n                window.addEventListener('touchcancel', this.handleTouchCancel, {\n                    passive: true\n                });\n                document.addEventListener('keydown', this.handleKeyDown, true);\n            } else if (prevModalState !== \"LOADED\" && modalState === \"LOADED\") {\n                window.addEventListener('wheel', this.handleWheel, {\n                    passive: true\n                });\n            } else if (prevModalState !== \"UNLOADING\" && modalState === \"UNLOADING\") {\n                this.ensureImgTransitionEnd();\n                window.removeEventListener('wheel', this.handleWheel);\n                window.removeEventListener('touchstart', this.handleTouchStart);\n                window.removeEventListener('touchmove', this.handleTouchMove);\n                window.removeEventListener('touchend', this.handleTouchEnd);\n                window.removeEventListener('touchcancel', this.handleTouchCancel);\n                document.removeEventListener('keydown', this.handleKeyDown, true);\n            } else if (prevModalState !== \"UNLOADED\" && modalState === \"UNLOADED\") {\n                this.bodyScrollEnable();\n                window.removeEventListener('resize', this.handleResize);\n                this.refModalImg.current?.removeEventListener?.('transitionend', this.handleImgTransitionEnd);\n                this.refDialog.current?.close?.();\n            }\n        };\n        this.getDialogContainer = ()=>{\n            let el = document.querySelector('[data-rmiz-portal]');\n            if (el == null) {\n                el = document.createElement('div');\n                el.setAttribute('data-rmiz-portal', '');\n                document.body.appendChild(el);\n            }\n            return el;\n        };\n        this.setId = ()=>{\n            const gen4 = ()=>Math.random().toString(16).slice(-4);\n            this.setState({\n                id: gen4() + gen4() + gen4()\n            });\n        };\n        this.setAndTrackImg = ()=>{\n            const contentEl = this.refContent.current;\n            if (!contentEl) return;\n            this.imgEl = contentEl.querySelector(IMAGE_QUERY);\n            if (this.imgEl) {\n                this.contentNotFoundChangeObserver?.disconnect?.();\n                this.imgEl.addEventListener('load', this.handleImgLoad);\n                this.imgEl.addEventListener('click', this.handleZoom);\n                if (!this.state.loadedImgEl) {\n                    this.handleImgLoad();\n                }\n                this.imgElResizeObserver = new ResizeObserver((entries)=>{\n                    const entry = entries[0];\n                    if (entry?.target) {\n                        this.imgEl = entry.target;\n                        this.setState({\n                            styleGhost: getStyleGhost(this.imgEl)\n                        });\n                    }\n                });\n                this.imgElResizeObserver.observe(this.imgEl);\n                if (!this.contentChangeObserver) {\n                    this.contentChangeObserver = new MutationObserver(()=>{\n                        this.setState({\n                            styleGhost: getStyleGhost(this.imgEl)\n                        });\n                    });\n                    this.contentChangeObserver.observe(contentEl, {\n                        attributes: true,\n                        childList: true,\n                        subtree: true\n                    });\n                }\n            } else if (!this.contentNotFoundChangeObserver) {\n                this.contentNotFoundChangeObserver = new MutationObserver(this.setAndTrackImg);\n                this.contentNotFoundChangeObserver.observe(contentEl, {\n                    childList: true,\n                    subtree: true\n                });\n            }\n        };\n        this.handleIfZoomChanged = (prevIsZoomed)=>{\n            const { isZoomed } = this.props;\n            if (!prevIsZoomed && isZoomed) {\n                this.zoom();\n            } else if (prevIsZoomed && !isZoomed) {\n                this.unzoom();\n            }\n        };\n        this.handleImgLoad = ()=>{\n            const imgSrc = getImgSrc(this.imgEl);\n            if (!imgSrc) return;\n            const img = new Image();\n            if (testImg(this.imgEl)) {\n                img.sizes = this.imgEl.sizes;\n                img.srcset = this.imgEl.srcset;\n                img.crossOrigin = this.imgEl.crossOrigin;\n            }\n            img.src = imgSrc;\n            const setLoaded = ()=>{\n                this.setState({\n                    loadedImgEl: img,\n                    styleGhost: getStyleGhost(this.imgEl)\n                });\n            };\n            img.decode().then(setLoaded).catch(()=>{\n                if (testImgLoaded(img)) {\n                    setLoaded();\n                    return;\n                }\n                img.onload = setLoaded;\n            });\n        };\n        this.handleZoom = ()=>{\n            if (!this.props.isDisabled && this.hasImage()) {\n                this.props.onZoomChange?.(true);\n            }\n        };\n        this.handleUnzoom = ()=>{\n            if (!this.props.isDisabled) {\n                this.props.onZoomChange?.(false);\n            }\n        };\n        this.handleBtnUnzoomClick = (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            this.handleUnzoom();\n        };\n        this.handleDialogCancel = (e)=>{\n            e.preventDefault();\n        };\n        this.handleDialogClick = (e)=>{\n            if (e.target === this.refModalContent.current || e.target === this.refModalImg.current) {\n                e.stopPropagation();\n                this.handleUnzoom();\n            }\n        };\n        this.handleDialogClose = (e)=>{\n            e.stopPropagation();\n            this.handleUnzoom();\n        };\n        this.handleKeyDown = (e)=>{\n            if (e.key === 'Escape' || e.keyCode === 27) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.handleUnzoom();\n            }\n        };\n        this.handleWheel = (e)=>{\n            if (e.ctrlKey) return;\n            e.stopPropagation();\n            queueMicrotask(()=>{\n                this.handleUnzoom();\n            });\n        };\n        this.handleTouchStart = (e)=>{\n            if (e.touches.length > 1) {\n                this.isScaling = true;\n                return;\n            }\n            if (e.changedTouches.length === 1 && e.changedTouches[0]) {\n                this.touchYStart = e.changedTouches[0].screenY;\n            }\n        };\n        this.handleTouchMove = (e)=>{\n            const browserScale = window.visualViewport?.scale ?? 1;\n            if (this.props.canSwipeToUnzoom && !this.isScaling && browserScale <= 1 && this.touchYStart != null && e.changedTouches[0]) {\n                this.touchYEnd = e.changedTouches[0].screenY;\n                const max = Math.max(this.touchYStart, this.touchYEnd);\n                const min = Math.min(this.touchYStart, this.touchYEnd);\n                const delta = Math.abs(max - min);\n                if (delta > this.props.swipeToUnzoomThreshold) {\n                    this.touchYStart = undefined;\n                    this.touchYEnd = undefined;\n                    this.handleUnzoom();\n                }\n            }\n        };\n        this.handleTouchEnd = ()=>{\n            this.isScaling = false;\n            this.touchYStart = undefined;\n            this.touchYEnd = undefined;\n        };\n        this.handleTouchCancel = ()=>{\n            this.isScaling = false;\n            this.touchYStart = undefined;\n            this.touchYEnd = undefined;\n        };\n        this.handleResize = ()=>{\n            this.setState({\n                shouldRefresh: true\n            });\n        };\n        this.hasImage = ()=>{\n            return this.imgEl && (this.state.loadedImgEl || testSvg(this.imgEl)) && window.getComputedStyle(this.imgEl).display !== 'none';\n        };\n        this.zoom = ()=>{\n            this.bodyScrollDisable();\n            this.refDialog.current?.showModal?.();\n            this.refModalImg.current?.addEventListener?.('transitionend', this.handleImgTransitionEnd);\n            this.setState({\n                modalState: \"LOADING\"\n            });\n        };\n        this.unzoom = ()=>{\n            this.setState({\n                modalState: \"UNLOADING\"\n            });\n        };\n        this.handleImgTransitionEnd = ()=>{\n            clearTimeout(this.timeoutTransitionEnd);\n            if (this.state.modalState === \"LOADING\") {\n                this.setState({\n                    modalState: \"LOADED\"\n                });\n            } else if (this.state.modalState === \"UNLOADING\") {\n                this.setState({\n                    shouldRefresh: false,\n                    modalState: \"UNLOADED\"\n                });\n            }\n        };\n        this.ensureImgTransitionEnd = ()=>{\n            if (this.refModalImg.current) {\n                const td = window.getComputedStyle(this.refModalImg.current).transitionDuration;\n                const tdFloat = parseFloat(td);\n                if (tdFloat) {\n                    const tdMs = tdFloat * (td.endsWith('ms') ? 1 : 1000) + 50;\n                    this.timeoutTransitionEnd = setTimeout(this.handleImgTransitionEnd, tdMs);\n                }\n            }\n        };\n        this.bodyScrollDisable = ()=>{\n            this.prevBodyAttrs = {\n                overflow: document.body.style.overflow,\n                width: document.body.style.width\n            };\n            const clientWidth = document.body.clientWidth;\n            document.body.style.overflow = 'hidden';\n            document.body.style.width = `${clientWidth}px`;\n        };\n        this.bodyScrollEnable = ()=>{\n            document.body.style.width = this.prevBodyAttrs.width;\n            document.body.style.overflow = this.prevBodyAttrs.overflow;\n            this.prevBodyAttrs = defaultBodyAttrs;\n        };\n        this.loadZoomImg = ()=>{\n            const { props: { zoomImg } } = this;\n            const zoomImgSrc = zoomImg?.src;\n            if (zoomImgSrc) {\n                const img = new Image();\n                img.sizes = zoomImg?.sizes ?? '';\n                img.srcset = zoomImg?.srcSet ?? '';\n                img.crossOrigin = zoomImg?.crossOrigin ?? undefined;\n                img.src = zoomImgSrc;\n                const setLoaded = ()=>{\n                    this.setState({\n                        isZoomImgLoaded: true\n                    });\n                };\n                img.decode().then(setLoaded).catch(()=>{\n                    if (testImgLoaded(img)) {\n                        setLoaded();\n                        return;\n                    }\n                    img.onload = setLoaded;\n                });\n            }\n        };\n        this.UNSAFE_handleSvg = ()=>{\n            const { imgEl, refModalImg, styleModalImg } = this;\n            if (testSvg(imgEl)) {\n                const svgEl = imgEl.cloneNode(true);\n                adjustSvgIDs(svgEl);\n                svgEl.style.width = `${styleModalImg.width || 0}px`;\n                svgEl.style.height = `${styleModalImg.height || 0}px`;\n                svgEl.addEventListener('click', this.handleUnzoom);\n                refModalImg.current?.firstChild?.remove?.();\n                refModalImg.current?.appendChild?.(svgEl);\n            }\n        };\n    }\n    render() {\n        const { handleBtnUnzoomClick, handleDialogCancel, handleDialogClick, handleDialogClose, handleUnzoom, handleZoom, imgEl, props: { a11yNameButtonUnzoom, a11yNameButtonZoom, children, classDialog, IconUnzoom, IconZoom, isZoomed, wrapElement: WrapElement, ZoomContent, zoomImg, zoomMargin }, refContent, refDialog, refModalContent, refModalImg, refWrap, state: { id, isZoomImgLoaded, loadedImgEl, modalState, shouldRefresh, styleGhost } } = this;\n        const idModal = `rmiz-modal-${id}`;\n        const idModalImg = `rmiz-modal-img-${id}`;\n        const isDiv = testDiv(imgEl);\n        const isImg = testImg(imgEl);\n        const isSvg = testSvg(imgEl);\n        const imgAlt = getImgAlt(imgEl);\n        const imgSrc = getImgSrc(imgEl);\n        const imgSizes = isImg ? imgEl.sizes : undefined;\n        const imgSrcSet = isImg ? imgEl.srcset : undefined;\n        const imgCrossOrigin = isImg ? imgEl.crossOrigin : undefined;\n        const hasZoomImg = !!zoomImg?.src;\n        const hasImage = this.hasImage();\n        const labelBtnZoom = imgAlt ? `${a11yNameButtonZoom}: ${imgAlt}` : a11yNameButtonZoom;\n        const isModalActive = modalState === \"LOADING\" || modalState === \"LOADED\";\n        const dataContentState = hasImage ? 'found' : 'not-found';\n        const dataOverlayState = modalState === \"UNLOADED\" || modalState === \"UNLOADING\" ? 'hidden' : 'visible';\n        const styleContent = {\n            visibility: modalState === \"UNLOADED\" ? 'visible' : 'hidden'\n        };\n        this.styleModalImg = hasImage ? getStyleModalImg({\n            hasZoomImg,\n            imgSrc,\n            isSvg,\n            isZoomed: isZoomed && isModalActive,\n            loadedImgEl,\n            offset: zoomMargin,\n            shouldRefresh,\n            targetEl: imgEl\n        }) : {};\n        let modalContent = null;\n        if (hasImage) {\n            const modalImg = isImg || isDiv ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n                alt: imgAlt,\n                crossOrigin: imgCrossOrigin,\n                sizes: imgSizes,\n                src: imgSrc,\n                srcSet: imgSrcSet,\n                ...isZoomImgLoaded && modalState === \"LOADED\" ? zoomImg : {},\n                \"data-rmiz-modal-img\": \"\",\n                height: this.styleModalImg.height || undefined,\n                id: idModalImg,\n                ref: refModalImg,\n                style: this.styleModalImg,\n                width: this.styleModalImg.width || undefined\n            }) : isSvg ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                \"data-rmiz-modal-img\": true,\n                ref: refModalImg,\n                style: this.styleModalImg\n            }) : null;\n            const modalBtnUnzoom = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n                \"aria-label\": a11yNameButtonUnzoom,\n                \"data-rmiz-btn-unzoom\": \"\",\n                onClick: handleBtnUnzoomClick,\n                type: \"button\"\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(IconUnzoom, null));\n            modalContent = ZoomContent ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ZoomContent, {\n                buttonUnzoom: modalBtnUnzoom,\n                modalState: modalState,\n                img: modalImg,\n                isZoomImgLoaded: isZoomImgLoaded,\n                onUnzoom: handleUnzoom\n            }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, modalImg, modalBtnUnzoom);\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrapElement, {\n            \"aria-owns\": idModal,\n            \"data-rmiz\": \"\",\n            ref: refWrap\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrapElement, {\n            \"data-rmiz-content\": dataContentState,\n            ref: refContent,\n            style: styleContent\n        }, children), hasImage && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrapElement, {\n            \"data-rmiz-ghost\": \"\",\n            style: styleGhost\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            \"aria-label\": labelBtnZoom,\n            \"data-rmiz-btn-zoom\": \"\",\n            onClick: handleZoom,\n            type: \"button\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(IconZoom, null))), hasImage && /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"dialog\", {\n            \"aria-labelledby\": idModalImg,\n            \"aria-modal\": \"true\",\n            className: classDialog,\n            \"data-rmiz-modal\": \"\",\n            id: idModal,\n            onClick: handleDialogClick,\n            onClose: handleDialogClose,\n            onCancel: handleDialogCancel,\n            ref: refDialog,\n            role: \"dialog\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            \"data-rmiz-modal-overlay\": dataOverlayState\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            \"data-rmiz-modal-content\": \"\",\n            ref: refModalContent\n        }, modalContent)), this.getDialogContainer()));\n    }\n    componentDidMount() {\n        this.setId();\n        this.setAndTrackImg();\n        this.handleImgLoad();\n        this.UNSAFE_handleSvg();\n    }\n    componentWillUnmount() {\n        if (this.state.modalState !== \"UNLOADED\") {\n            this.bodyScrollEnable();\n        }\n        this.contentChangeObserver?.disconnect?.();\n        this.contentNotFoundChangeObserver?.disconnect?.();\n        this.imgElResizeObserver?.disconnect?.();\n        this.imgEl?.removeEventListener?.('load', this.handleImgLoad);\n        this.imgEl?.removeEventListener?.('click', this.handleZoom);\n        this.refModalImg.current?.removeEventListener?.('transitionend', this.handleImgTransitionEnd);\n        window.removeEventListener('wheel', this.handleWheel);\n        window.removeEventListener('touchstart', this.handleTouchStart);\n        window.removeEventListener('touchmove', this.handleTouchMove);\n        window.removeEventListener('touchend', this.handleTouchEnd);\n        window.removeEventListener('touchcancel', this.handleTouchCancel);\n        window.removeEventListener('resize', this.handleResize);\n        document.removeEventListener('keydown', this.handleKeyDown, true);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        this.handleModalStateChange(prevState.modalState);\n        this.UNSAFE_handleSvg();\n        this.handleIfZoomChanged(prevProps.isZoomed);\n    }\n}\nControlledBase.defaultProps = {\n    a11yNameButtonUnzoom: 'Minimize image',\n    a11yNameButtonZoom: 'Expand image',\n    canSwipeToUnzoom: true,\n    IconUnzoom: ICompress,\n    IconZoom: IEnlarge,\n    isDisabled: false,\n    swipeToUnzoomThreshold: 10,\n    wrapElement: 'div',\n    zoomMargin: 0\n};\nfunction Uncontrolled(props) {\n    const [isZoomed, setIsZoomed] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Controlled, {\n        ...props,\n        isZoomed: isZoomed,\n        onZoomChange: setIsZoomed\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-medium-image-zoom/dist/index.js\n");

/***/ })

};
;