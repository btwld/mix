// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
//
// DO NOT MODIFY

// ignore_for_file: prefer_relative_imports
import 'dart:ui';

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:mix/mix.dart';
import 'package:flutter/widgets.dart';
import 'box.attribute.g.dart';

/// A spec for BoxTest.
///
/// To retrieve an instance of [BoxTestSpec], use the [BoxTestSpec.of] method with a
/// [BuildContext], or the [BoxTestSpec.from] method with [MixData]
class BoxTestSpec extends Spec<BoxTestSpec> {
  /// Creates a [BoxTestSpec] with the given fields
  ///
// All parameters are optional
  const BoxTestSpec({
    this.alignment,
    this.padding,
    this.margin,
    this.constraints,
    this.decoration,
    this.foregroundDecoration,
    this.transform,
    this.transformAlignment,
    this.clipBehavior,
    this.width,
    this.height,
  });

  /// Aligns the child within the box.
  final AlignmentGeometry? alignment;

  /// Adds empty space inside the box.
  final EdgeInsetsGeometry? padding;

  /// Adds empty space around the box.
  final EdgeInsetsGeometry? margin;

  /// Applies additional constraints to the child.
  final BoxConstraints? constraints;

  /// Paints a decoration behind the child.
  final Decoration? decoration;

  /// Paints a decoration in front of the child.
  final Decoration? foregroundDecoration;

  /// Applies a transformation matrix before painting the box.
  final Matrix4? transform;

  /// Aligns the origin of the coordinate system for the [transform].
  final AlignmentGeometry? transformAlignment;

  /// Defines the clip behavior for the box when [BoxConstraints] has a negative
  /// minimum extent.
  final Clip? clipBehavior;

  /// Specifies the width of the box.
  final double? width;

  /// Specifies the height of the box.
  final double? height;

  @override
  BoxTestSpec copyWith({
    AlignmentGeometry? alignment,
    EdgeInsetsGeometry? padding,
    EdgeInsetsGeometry? margin,
    BoxConstraints? constraints,
    Decoration? decoration,
    Decoration? foregroundDecoration,
    Matrix4? transform,
    AlignmentGeometry? transformAlignment,
    Clip? clipBehavior,
    double? width,
    double? height,
  }) {
    return BoxTestSpec(
      alignment: alignment ?? this.alignment,
      padding: padding ?? this.padding,
      margin: margin ?? this.margin,
      constraints: constraints ?? this.constraints,
      decoration: decoration ?? this.decoration,
      foregroundDecoration: foregroundDecoration ?? this.foregroundDecoration,
      transform: transform ?? this.transform,
      transformAlignment: transformAlignment ?? this.transformAlignment,
      clipBehavior: clipBehavior ?? this.clipBehavior,
      width: width ?? this.width,
      height: height ?? this.height,
    );
  }

  @override
  String toString() {
    return 'BoxTestSpec(alignment: $alignment, padding: $padding, margin: $margin, constraints: $constraints, decoration: $decoration, foregroundDecoration: $foregroundDecoration, transform: $transform, transformAlignment: $transformAlignment, clipBehavior: $clipBehavior, width: $width, height: $height)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is BoxTestSpec &&
        other.alignment == alignment &&
        other.padding == padding &&
        other.margin == margin &&
        other.constraints == constraints &&
        other.decoration == decoration &&
        other.foregroundDecoration == foregroundDecoration &&
        other.transform == transform &&
        other.transformAlignment == transformAlignment &&
        other.clipBehavior == clipBehavior &&
        other.width == width &&
        other.height == height;
  }

  @override
  int get hashCode {
    return alignment.hashCode ^
        padding.hashCode ^
        margin.hashCode ^
        constraints.hashCode ^
        decoration.hashCode ^
        foregroundDecoration.hashCode ^
        transform.hashCode ^
        transformAlignment.hashCode ^
        clipBehavior.hashCode ^
        width.hashCode ^
        height.hashCode;
  }

  @override
  BoxTestSpec lerp(
    BoxTestSpec? other,
    double t,
  ) {
    if (other == null) return this;

    return BoxTestSpec(
      alignment: AlignmentGeometry.lerp(alignment, other.alignment, t),
      padding: EdgeInsetsGeometry.lerp(padding, other.padding, t),
      margin: EdgeInsetsGeometry.lerp(margin, other.margin, t),
      constraints: BoxConstraints.lerp(constraints, other.constraints, t),
      decoration: Decoration.lerp(decoration, other.decoration, t),
      foregroundDecoration:
          Decoration.lerp(foregroundDecoration, other.foregroundDecoration, t),
      transform: Matrix4Tween(begin: transform, end: other.transform).lerp(t),
      transformAlignment: AlignmentGeometry.lerp(
          transformAlignment, other.transformAlignment, t),
      clipBehavior: t < 0.5 ? clipBehavior : other.clipBehavior,
      width: lerpDouble(width, other.width, t) ?? other.width,
      height: lerpDouble(height, other.height, t) ?? other.height,
    );
  }

  /// Retrieves the [BoxTestSpec] from the nearest [Mix] ancestor.
  ///
  /// If no ancestor is found, returns [BoxTestSpec].
  static BoxTestSpec of(BuildContext context) {
    final mix = Mix.of(context);
    return BoxTestSpec.from(mix);
  }

  /// Retrieves the [BoxTestSpec] from a MixData.
  ///
  /// returns [BoxTestSpec].
  static BoxTestSpec from(MixData mix) {
    return mix.attributeOf<BoxTestSpecAttribute>()?.resolve(mix) ??
        const BoxTestSpec();
  }
}

/// A tween that interpolates between two [BoxTestSpec] instances.
///
/// This class can be used in animations to smoothly transition between
/// different BoxTestSpec specifications.
class BoxTestSpecTween extends Tween<BoxTestSpec?> {
  BoxTestSpecTween({
    super.begin,
    super.end,
  });

  @override
  BoxTestSpec lerp(double t) {
    if (begin == null && end == null) return const BoxTestSpec();
    if (begin == null) return end!;

    return begin!.lerp(end!, t);
  }
}
