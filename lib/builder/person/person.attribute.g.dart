// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
//
// DO NOT MODIFY

// ignore_for_file: prefer_relative_imports
import 'package:flutter/widgets.dart';
import 'package:mix/mix.dart';

import 'person.spec.g.dart';

/// Represents the attributes of a [PersonSpec].
///
/// This class encapsulates properties defining the layout and
/// appearance of a [PersonSpec].
///
/// Use this class to configure the attributes of a [PersonSpec] and pass it to
/// the [PersonSpec] constructor.
class PersonSpecAttribute extends SpecAttribute<PersonSpec> {
  const PersonSpecAttribute({
    this.name,
    this.age,
    this.address,
    this.isEmployed,
    this.height,
    this.hobbies,
    this.favoriteColors,
    this.animated,
    super.animated,
  });

  final String? name;

  final int? age;

  final Map<String, String>? address;

  final bool? isEmployed;

  final double? height;

  /// Hobbies of a person
  final Set<String>? hobbies;

  final List<String>? favoriteColors;

  final AnimatedData? animated;

  @override
  PersonSpec resolve(MixData mix) {
    return PersonSpec(
      name: name,
      age: age,
      address: address,
      isEmployed: isEmployed,
      height: height,
      hobbies: hobbies,
      favoriteColors: favoriteColors,
      animated: animated,
    );
  }

  @override
  PersonSpecAttribute merge(PersonSpecAttribute? other) {
    if (other == null) return this;

    return PersonSpecAttribute(
      name: other.name ?? name,
      age: other.age ?? age,
      address: other.address ?? address,
      isEmployed: other.isEmployed ?? isEmployed,
      height: other.height ?? height,
      hobbies: other.hobbies ?? hobbies,
      favoriteColors: other.favoriteColors ?? favoriteColors,
      animated: other.animated ?? animated,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is PersonSpecAttribute &&
        other.name == name &&
        other.age == age &&
        mapEquals(other.address, address) &&
        other.isEmployed == isEmployed &&
        other.height == height &&
        setEquals(other.hobbies, hobbies) &&
        listEquals(other.favoriteColors, favoriteColors) &&
        other.animated == animated;
  }

  @override
  int get hashCode {
    return name.hashCode ^
        age.hashCode ^
        address.hashCode ^
        isEmployed.hashCode ^
        height.hashCode ^
        hobbies.hashCode ^
        favoriteColors.hashCode ^
        animated.hashCode;
  }
}
