name: "Run Tests"
description: "Run tests for all packages"

inputs:
  token:
    description: 'Github token'
    required: true
  flutter-version:
    description: 'Flutter version'
    required: false
    default: "stable"
  run-dcm:
    description: 'Should run DCM'
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Checkout mix repo
      uses: actions/checkout@v4
    
    - name: Install FVM
      shell: bash
      run: |
        NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://fvm.app/install.sh)"
        echo "PATH=/home/runner/.fvm_flutter/bin/fvm:$PATH" >> $GITHUB_ENV

    - name: Use FVM
      shell: bash
      run: |
        fvm --version
        fvm use ${{ inputs.flutter-version }} --force
        
    - uses: kuhnroyal/flutter-fvm-config-action@v2
      id: fvm-config-action

    - uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ steps.fvm-config-action.outputs.FLUTTER_VERSION }}
        channel: ${{ steps.fvm-config-action.outputs.FLUTTER_CHANNEL }}

    - name: Flutter version
      shell: bash
      run: flutter --version

    - name: Setup Melos
      uses: bluefireteam/melos-action@v3

    - uses: invertase/github-action-dart-analyzer@v1
      with:
        fatal-infos: false
      
    - name: Run build runner
      shell: bash    
      run: melos run brb

    - name: Run Test with Dynamic Concurrency
      run: |
        # Detect available cores and use half for concurrency
        TOTAL_CORES=$(nproc)
        CONCURRENCY=$((TOTAL_CORES / 2))
        # Ensure minimum of 1
        CONCURRENCY=$((CONCURRENCY > 0 ? CONCURRENCY : 1))
        
        echo "Total cores: $TOTAL_CORES, Using concurrency: $CONCURRENCY across ALL packages"
        
        # Run all tests concurrently across all packages with flutter test
        # flutter test can handle both Flutter and Dart packages
        melos exec -c $CONCURRENCY --fail-fast -- flutter test
      shell: bash

    - name: Install DCM
      if: ${{ inputs.run-dcm }}
      uses: CQLabs/setup-dcm@v1
      with:
        github_token: ${{ inputs.token }}
        folders: packages/*/lib

    - name: Run DCM
      run: dcm analyze .
      shell: bash

    - name: Run melos fix
      run: melos run fix
      shell: bash

    # Lint
    - name: analyze
      run: melos run --no-select analyze
      shell: bash
      
    # - name: Run custom_lint
    #   run: melos run custom_lint_analyze
    #   shell: bash
      
    # Others
    - name: Verify if mix_lint_test is up to date with mix_lint
      run: cd scripts && ./compare_files.sh ../packages/mix_lint/lib/src/lints ../packages/mix_lint_test/test/lints
      shell: bash
