name: "Run Tests"
description: "Run tests for all packages"

inputs:
  token:
    description: 'Github token'
    required: true
  flutter-version:
    description: 'Flutter version'
    required: false
    default: "stable"
  run-dcm:
    description: 'Should run DCM'
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Checkout mix repo
      uses: actions/checkout@v4

    # Cache FVM installation
    - name: Cache FVM
      uses: actions/cache@v4
      with:
        path: |
          ~/.fvm
          /home/runner/.fvm_flutter
        key: fvm-${{ runner.os }}-${{ inputs.flutter-version }}
        restore-keys: |
          fvm-${{ runner.os }}-

    # Cache Pub dependencies  
    - name: Cache Pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          **/pubspec.lock
        key: pub-cache-${{ runner.os }}-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          pub-cache-${{ runner.os }}-

    # Cache Dart tools and build artifacts
    - name: Cache Dart tools and build
      uses: actions/cache@v4
      with:
        path: |
          **/.dart_tool
          **/build
          **/.packages
        key: dart-tools-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}-${{ hashFiles('**/*.dart') }}
        restore-keys: |
          dart-tools-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}-
          dart-tools-${{ runner.os }}-
    
    - name: Install FVM
      shell: bash
      run: |
        if ! command -v fvm &> /dev/null; then
          NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://fvm.app/install.sh)"
        fi
        echo "PATH=/home/runner/.fvm_flutter/bin/fvm:$PATH" >> $GITHUB_ENV

    - name: Use FVM
      shell: bash
      run: |
        fvm --version
        fvm use ${{ inputs.flutter-version }} --force
        
    - uses: kuhnroyal/flutter-fvm-config-action@v2
      id: fvm-config-action

    - uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ steps.fvm-config-action.outputs.FLUTTER_VERSION }}
        channel: ${{ steps.fvm-config-action.outputs.FLUTTER_CHANNEL }}

    - name: Flutter version
      shell: bash
      run: flutter --version

    - name: Setup Melos
      uses: bluefireteam/melos-action@v3

    - uses: invertase/github-action-dart-analyzer@v1
      with:
        fatal-infos: false
      
    - name: Run build runner
      shell: bash    
      run: |
        echo "Running build runner on packages that need code generation..."
        # Only run build runner on packages with code generation needs
        melos exec --depends-on="build_runner" -- dart run build_runner build --delete-conflicting-outputs

    - name: Run Test
      run: |
        melos run test:flutter
        melos run test:dart
      shell: bash

    - name: Install DCM
      if: ${{ inputs.run-dcm == 'true' }}
      uses: CQLabs/setup-dcm@v1
      with:
        github_token: ${{ inputs.token }}

    - name: Run DCM
      if: ${{ inputs.run-dcm == 'true' }}
      run: dcm analyze .
      shell: bash

    - name: Run melos fix
      run: melos run fix
      shell: bash

    # Lint
    - name: analyze
      run: melos run --no-select analyze
      shell: bash
      
    # - name: Run custom_lint
    #   run: melos run custom_lint_analyze
    #   shell: bash
      
    # Others
    - name: Verify if mix_lint_test is up to date with mix_lint
      run: cd scripts && ./compare_files.sh ../packages/mix_lint/lib/src/lints ../packages/mix_lint_test/test/lints
      shell: bash
